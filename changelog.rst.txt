
UAF changelog                     
====================================================================================================


Version = X.Y with

 - X : major version number
    - incremented only when major functionality has been added
    - e.g. when a Server implementation has been added
 - Y : minor version number 
    - incremented every time some minor functionality has been added
    - e.g. when the Client implementation supports another OPC UA service
    

Bugfixes (which do not have any implications on the API) can only be tracked 
via the GIT version control system.


1.2 @ 2013/05/24
----------------------------------------------------------------------------------------------------

Informally:

 - DataValues are now better supported. A DataValue class (with a status, a value, timestamps, ...)
   has been added, and ReadResultTarget and WriteRequestTarget inherit now from this class.
   
 - The "timestampstoreturn" namespace / Python module has been added to allow the user to specify 
   which timestamps should be returned by the server. 
   
 - The "opcuastatuscodes" Python module has been added to allow Python users to access all 
   OPC UA status codes symbolically.
   
 - A new service has been added: it's now possible to read raw historical data, and the 
   modifications of this historical data. As with the Browse service implementation, the
   UAF can deal with continuation points automatically.
   
Formally:
   
 - The following namespaces (modules) have been added:
 
    - uaf::timestampstoreturn
      (pyuaf.util.timestampstoreturn)
   
 - The following classes have been added:
 
    - uaf::DataValue 
      (pyuaf.util.DataValue)
    - uafc::HistoryReadRawModifiedRequest
      (pyuaf.client.requests.HistoryReadRawModifiedRequest)
    - uafc::HistoryReadRawModifiedRequestTarget 
      (pyuaf.client.requests.HistoryReadRawModifiedRequestTarget 
       and pyuaf.client.requests.HistoryReadRawModifiedRequestTargetVector)
    - uafc::HistoryReadRawModifiedConfig 
      (pyuaf.client.configs.HistoryReadRawModifiedConfig)
    - uafc::HistoryReadRawModifiedSettings 
      (pyuaf.client.configs.HistoryReadRawModifiedSettings)
    - uafc::HistoryReadRawModifiedResult 
      (pyuaf.client.requests.HistoryReadRawModifiedResult)
    - uafc::HistoryReadRawModifiedResultTarget 
      (pyuaf.client.requests.HistoryReadRawModifiedResultTarget 
       and pyuaf.client.requests.HistoryReadRawModifiedResultTargetVector)
      
 - The following class inheritances have been modified:
 
    - uafc::ReadResultTarget: inherits now from uaf::DataValue
      (pyuaf.client.results.ReadResultTarget: inherits now from pyuaf.util.DataValue)
    - uafc::WriteRequestTarget: inherits now from uaf::DataValue
      (pyuaf.client.requests.WriteRequestTarget: inherits now from pyuaf.util.DataValue)

 - The following methods have been added to existing classes:
 
    - uaf::Status::hasSpecificOpcUaStatusCode(): replaces hasOpcUaStatusCode()
      (pyuaf.util.Status.hasSpecificOpcUaStatusCode(): replaces hasOpcUaStatusCode())
    - uaf::Status::setOpcUaStatusCode()
      (pyuaf.util.Status.setOpcUaStatusCode())
    - uaf::DateTime::sleep() and msleep()
      (pyuaf.util.DateTime.sleep() and msleep())
 
 

1.1 @ 2013/05/22
----------------------------------------------------------------------------------------------------

Informally:

 - The Browse service is now supported (including the functionality to let the UAF invoke 
   BrowseNext automatically).
   
 - Strings and ByteStrings that are part of OPC UA requests and results have become 
   "primitive" values in Python (i.e. they are encapsulated in Python by 
   pyuaf.util.primitives.String and pyuaf.util.primitives.ByteString classes).
   
 - Bytestrings are now better supported in Python: a typemap has been added that maps a 
   uaf::ByteString to a built-in Python bytearray and the other way around.
   
 - Timestamps are now supported via the DateTime class.
 
 - NodeId identifiers can now also be GUIDs (Globally Unique Identifiers) and bytestrings.

 - Browse examples have been added

Formally:

 - The following namespaces (modules) have been added:
 
    - uaf::nodeclasses 
      (pyuaf.util.nodeclasses)
    - uaf::browsedirections 
      (pyuaf.util.browsedirections)
   
 - The following classes have been added:
 
    - uaf::ViewDescription 
      (pyuaf.util.ViewDescription)
    - uaf::Guid 
      (pyuaf.util.Guid)
    - uaf::ReferenceDescription 
      (pyuaf.util.ReferenceDescription and pyuaf.util.ReferenceDescriptionVector)
    - uaf::DateTime 
      (pyuaf.util.DateTime)
    - uafc::BrowseRequest
      (pyuaf.client.requests.BrowseRequest)
    - uafc::BrowseRequestTarget 
      (pyuaf.client.requests.BrowseRequestTarget and pyuaf.client.requests.BrowseRequestTargetVector)
    - uafc::BrowseConfig 
      (pyuaf.client.configs.BrowseConfig)
    - uafc::BrowseSettings 
      (pyuaf.client.configs.BrowseSettings)
    - uafc::BrowseResult 
      (pyuaf.client.requests.BrowseResult)
    - uafc::BrowseResultTarget 
      (pyuaf.client.requests.BrowseResultTarget and pyuaf.client.requests.BrowseResultTargetVector)
    - uafc::BrowseNextRequest
      (pyuaf.client.requests.BrowseNextRequest)
    - uafc::BrowseNextRequestTarget 
      (pyuaf.client.requests.BrowseNextRequestTarget and pyuaf.client.requests.BrowseNextRequestTargetVector)
    - uafc::BrowseNextConfig 
      (pyuaf.client.configs.BrowseNextConfig)
    - uafc::BrowseNextSettings 
      (pyuaf.client.configs.BrowseNextSettings)
    - uafc::BrowseNextResult 
      (pyuaf.client.requests.BrowseNextResult)
    - uafc::BrowseNextResultTarget 
      (same as pyuaf.client.requests.BrowseResultTarget and pyuaf.client.requests.BrowseResultTargetVector)

 - The following methods and attributes have been added to existing classes:

    - uafc::Client::browse() 
      (pyuaf.util.Client.browse()) 
    - uaf::NodeId::isNull() 
      (pyuaf.util.NodeId.isNull()) 
    - uaf::NodeIdIdentifier::isNull(), idGuid, idOpaque 
      (pyuaf.util.NodeIdIdentifier.isNull(), idGuid, idOpaque)
    - uaf::Variant::toDateTime(), toDateTimeArray(), fromDateTime(), fromDateTimeArray() 
      (DateTime Variants are converted automatically into DateTime instances in Python) 
    - uaf::Variant::toByteString(), fromByteString(), toByteStringArray(), fromByteStringArray()
      (ByteString Variants are converted automatically into bytearray instances in Python) 
 


1.0 @ 2013/05/14
----------------------------------------------------------------------------------------------------

 - Public release on GitHub.

