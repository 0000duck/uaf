
UAF changelog                     
====================================================================================================


Version = X.Y with

- X : major version number
   - incremented only when major functionality has been added
   - e.g. when a Server implementation has been added
- Y : minor version number 
   - incremented every time some minor functionality has been added
   - e.g. when the Client implementation supports another OPC UA service
    

Bugfixes (which do not have any implications on the API) can only be tracked 
via the GIT version control system.



1.7 @ 2014/01/28
----------------------------------------------------------------------------------------------------

Informally:

- The 'SetPublishingMode' service has been implemented.
  With this service, you can enable or disable the publishing of notifications by a particular
  subscription. It's useful e.g. when you want to receive datachange notifications *only* when
  a particular widget of your User Interface is active. In this case, you can group the monitored
  items of that widget in a single subscription (could be a "unique" subscription, by setting the
  "unique" flag of the SubscriptionSettings), and then subsequently:
  - enable the subscription, whenever the widget becomes active
  - disable the subscription, whenever the widget becomes inactive.

- A method 'monitoredItemInformation(<ClientHandle>)' has been added to the Client class. 
  The result of this method is a 'MonitoredItemInformation' instance, which provides you information
  about the monitored item that you specified using the client handle. Among other things, it 
  will tell you the handle of the subscription that owns the monitored item.

- !!!Breaking change!!!

  The concept of 'notification handles' was redundant with the concept of 'client handles' of 
  monitored items. It has therefore been *removed* from the UAF. To make sure your code remains
  compatible, do a (case insensitive) search-all for 'notificationHandle', and replace all 
  occurrences with 'clientHandle'. Note that the term 'notificationhandle' may occur both in 
  attribute names and in method names.

- !!!Breaking change!!!

  BaseServiceSettings has been renamed to ServiceSettings. This -most likely- won't affect your 
  existing code. To be sure: do a search-all for 'BaseServiceSettings' and replace all occurrences
  with 'ServiceSettings'.

- !!!Breaking change!!!

  The 'exclusive' flag of subscription settings has been renamed to a more appropriate 'unique' 
  flag (to force the UAF to create a new subscription instead of reusing an existing one). 
  This -most likely- won't affect your existing code. To be sure: do a search-all for 
  'exclusive' and replace all occurrences with 'unique'.

Formally:

- The following methods were added to existing classes:
  
  - uafc::Client::setPublishingMode() 
    (pyuaf.client.Client.setPublishingMode())
  - uafc::Client::monitoredItemInformation() 
    (pyuaf.client.Client.monitoredItemInformation())

- The following attributes have been renamed or removed due to the removal of the redundant 
  'notification handle' concept in favor of the 'client handle' concept:
  
  - uafc::StatusDiagnostics (pyuaf.util.StatusDiagnostics):
    - hasNotificationHandles() -> renamed to hasClientHandles()
    - getNotificationHandles() -> renamed to getClientHandles()
    - setNotificationHandles() -> renamed to setClientHandles()
  - uafc::MonitoredItemNotification (pyuaf.client.subscriptions.MonitoredItemNotification)
    - notificationHandle -> removed (use clientHandle instead)
  - uafc::DataChangeNotification (pyuaf.client.subscriptions.DataChangeNotification)
    - notificationHandle -> removed (use clientHandle instead)
  - uafc::EventNotification (pyuaf.client.subscriptions.EventNotification)
    - notificationHandle -> removed (use clientHandle instead)
  - uafc::CreateMonitoredEventsResultTarget (pyuaf.client.results.CreateMonitoredEventsResultTarget)
    - notificationHandle -> removed (use clientHandle instead)
  - uafc::CreateMonitoredDataResultTarget (pyuaf.client.results.CreateMonitoredDataResultTarget)
    - notificationHandle -> removed (use clientHandle instead)
   
- The following classes have been renamed:

  - uafc::BaseServiceSettings (pyuaf.client.settings.BaseServiceSettings) 
    has been renamed to uafc::ServiceSettings (pyuaf.client.settings.ServiceSettings) 
   
- The following attributes have been renamed:

  - uafc::SubscriptionSettings::exclusive (pyuaf.client.settings.SubscriptionSettings.exclusive) 
    has been renamed to uafc::ServiceSettings::unique (pyuaf.client.settings.ServiceSettings.unique) 


1.6 @ 2014/01/07
----------------------------------------------------------------------------------------------------

Informally:

- The UAF / PyUAF now require the Unified Automation SDK version 1.4.0 or higher!
  
- The unit tests and examples now require UaServerCPP (that comes with SDK v1.4) to be run 
  instead of UaDemoServer (that comes with SDK v1.3 or lower).
  
- The unit tests are now based on Python's 'unittest' builtin module.

- By default, the UAF is now compiled *with* HTTPS support. However, if your Stack and SDK were 
  built *without* HTTPS support, you must (!!!) also compile the UAF *without* HTTPS support.
  See the install_linux.rst.txt and install_windows.rst.txt files for more info.

- Address now also has a constructor to create an address based on a single RelativePathElement.
  This allows you to define relative addresses in one line, also in C++::
  
    Address myMachine            ( NodeId("Demo", nsUri), serverUri );
    Address myMachineTemperature ( &myMachine, RelativePathElement(QualifiedName("Temperature" , nsUri)) );
    Address myMachinePressure    ( &myMachine, RelativePathElement(QualifiedName("Pressure"    , nsUri)) );

Formally:

- The following classes got an additional constructor:
 
  - uafc::Address
    (pyuaf.util.Address)


1.5 @ 2013/11/30
----------------------------------------------------------------------------------------------------

Informally:

- KeepAlive notifications are now supported. KeepAlive notifications make sure that the client 
  is aware that a subscription (and its monitored items) is still alive even though no notifications
  were send lately (since no data had changed or no events were sent).

- BaseNotification is now known as MonitoredItemNotification, to clarify that it is only a 
  superclass of DataChangeNotification and EventNotification, and not of other notifications such as
  the new KeepAliveNotification.

Formally:

- !!!Breaking change!!!

  uafc::BaseNotification (pyuaf.client.BaseNotification) is now known as 
  uafc::MonitoredItemNotification (pyuaf.client.MonitoredItemNotification). Only the name has
  changed (because it's more correct, see above), nothing else.

- The following classes have been added:
 
  - uafc::KeepAliveNotification 
    (pyuaf.client.KeepAliveNotification)


- The following methods were added to existing classes
 
  - uafc::ClientInterface::keepAliveReceived() 
    (pyuaf.client.Client.keepAliveReceived())



1.4 @ 2013/11/27
----------------------------------------------------------------------------------------------------

Informally:

- When createMonitoredData() or createMonitoredEvents() fail, you can now access the handles that
  were assigned to the monitored items 
  in Python (<the raised exception>.status.additionalDiagnostics().getNotificationHandles())
  and C++ (<the returned Status>.additionalDiagnostics().getNotificationHandles()). This is useful
  because when createMonitoredData() or createMonitoredEvents() fail (e.g. because the server is 
  not online yet), the UAF will still try to create the monitored items automatically in the 
  background. So as soon as the UAF succeeds in creating the monitored items, you will need the 
  handles to identify the notifications that you start to receive.

Formally:
      
- !!!Breaking change (only for the C++ API)!!!
 
  The handles from "uaf/client/clienthandles.h" (that were part of the uafc namespace) are now 
  part of the "uaf/util/handles.h" file (so they are not part of the uaf namespace).
  Also uaf::NotificationHandle (formerly uafc::NotificationHandle) is now a 32-bit unsigned int
  instead of 64-bit unsigned int.
  All this has no consequences for the Python API.

- The following classes have been added:
 
  - uaf::StatusDiagnostics 
    (pyuaf.util.StatusDiagnostics)
      
- The following methods were added to existing classes
 
  - uaf::Status::additionalDiagnostics() 
    (pyuaf.util.Status.additionalDiagnostics())


1.3 @ 2013/11/25
----------------------------------------------------------------------------------------------------

Informally:

- Added the convenience functions for asynchronous reading and writing (beginRead and beginWrite).
  (Asynchronous reading and writing was already available before, but only using the generic
  processRequest function).

Formally:

- The following methods have been added to existing classes:

  - uafc::Client::beginRead
    (pyuaf.client.Client.beginRead)
  - uafc::Client::beginWrite
    (pyuaf.client.Client.beginWrite)


1.2 @ 2013/05/24
----------------------------------------------------------------------------------------------------

Informally:

- DataValues are now better supported. A DataValue class (with a status, a value, timestamps, ...)
  has been added, and ReadResultTarget and WriteRequestTarget inherit now from this class.
   
- The "timestampstoreturn" namespace / Python module has been added to allow the user to specify 
  which timestamps should be returned by the server. 
   
- The "opcuastatuscodes" Python module has been added to allow Python users to access all 
  OPC UA status codes symbolically.
   
- A new service has been added: it's now possible to read raw historical data, and the 
  modifications of this historical data. As with the Browse service implementation, the
  UAF can deal with continuation points automatically.
   
Formally:

- !!!Breaking change!!!
    
  An uafc::WriteRequestTarget / pyuaf.client.requests.WriteRequestTarget now has 
  a 'status' attribute (of type uaf::Status / pyuaf.util.Status) 
  instead of a 'opcUaStatusCode' attribute (of type uint32_t / int).
   
- The following namespaces (modules) have been added:
 
  - uaf::timestampstoreturn
    (pyuaf.util.timestampstoreturn)
   
- The following classes have been added:
 
  - uaf::DataValue 
    (pyuaf.util.DataValue)
  - uafc::HistoryReadRawModifiedRequest
    (pyuaf.client.requests.HistoryReadRawModifiedRequest)
  - uafc::HistoryReadRawModifiedRequestTarget 
    (pyuaf.client.requests.HistoryReadRawModifiedRequestTarget 
    and pyuaf.client.requests.HistoryReadRawModifiedRequestTargetVector)
  - uafc::HistoryReadRawModifiedConfig 
    (pyuaf.client.configs.HistoryReadRawModifiedConfig)
  - uafc::HistoryReadRawModifiedSettings 
    (pyuaf.client.configs.HistoryReadRawModifiedSettings)
  - uafc::HistoryReadRawModifiedResult 
    (pyuaf.client.requests.HistoryReadRawModifiedResult)
  - uafc::HistoryReadRawModifiedResultTarget 
    (pyuaf.client.requests.HistoryReadRawModifiedResultTarget 
    and pyuaf.client.requests.HistoryReadRawModifiedResultTargetVector)
      
- The following class inheritances have been modified:
 
  - uafc::ReadResultTarget: inherits now from uaf::DataValue
    (pyuaf.client.results.ReadResultTarget: inherits now from pyuaf.util.DataValue)
  - uafc::WriteRequestTarget: inherits now from uaf::DataValue
    (pyuaf.client.requests.WriteRequestTarget: inherits now from pyuaf.util.DataValue)

- The following methods have been added to existing classes:
 
  - uafc::Client.historyReadRaw() and historyReadModified()
    (pyuaf.client.Client.historyReadRaw() and historyReadModified())
  - uaf::Status::hasSpecificOpcUaStatusCode(): replaces hasOpcUaStatusCode()
    (pyuaf.util.Status.hasSpecificOpcUaStatusCode(): replaces hasOpcUaStatusCode())
  - uaf::Status::setOpcUaStatusCode()
    (pyuaf.util.Status.setOpcUaStatusCode())
  - uaf::DateTime::sleep() and msleep()
    (pyuaf.util.DateTime.sleep() and msleep())
 
 

1.1 @ 2013/05/22
----------------------------------------------------------------------------------------------------

Informally:

- The Browse service is now supported (including the functionality to let the UAF invoke 
  BrowseNext automatically).
   
- Strings and ByteStrings that are part of OPC UA requests and results have become 
  "primitive" values in Python (i.e. they are encapsulated in Python by 
  pyuaf.util.primitives.String and pyuaf.util.primitives.ByteString classes).
   
- Bytestrings are now better supported in Python: a typemap has been added that maps a 
  uaf::ByteString to a built-in Python bytearray and the other way around.
   
- Timestamps are now supported via the DateTime class.

- NodeId identifiers can now also be GUIDs (Globally Unique Identifiers) and bytestrings.

- Browse examples have been added

Formally:

- The following namespaces (modules) have been added:
 
  - uaf::nodeclasses 
    (pyuaf.util.nodeclasses)
  - uaf::browsedirections 
    (pyuaf.util.browsedirections)
   
- The following classes have been added:
 
  - uaf::ViewDescription 
    (pyuaf.util.ViewDescription)
  - uaf::Guid 
    (pyuaf.util.Guid)
  - uaf::ReferenceDescription 
    (pyuaf.util.ReferenceDescription and pyuaf.util.ReferenceDescriptionVector)
  - uaf::DateTime 
    (pyuaf.util.DateTime)
  - uafc::BrowseRequest
    (pyuaf.client.requests.BrowseRequest)
  - uafc::BrowseRequestTarget 
    (pyuaf.client.requests.BrowseRequestTarget and pyuaf.client.requests.BrowseRequestTargetVector)
  - uafc::BrowseConfig 
    (pyuaf.client.configs.BrowseConfig)
  - uafc::BrowseSettings 
    (pyuaf.client.configs.BrowseSettings)
  - uafc::BrowseResult 
    (pyuaf.client.requests.BrowseResult)
  - uafc::BrowseResultTarget 
    (pyuaf.client.requests.BrowseResultTarget and pyuaf.client.requests.BrowseResultTargetVector)
  - uafc::BrowseNextRequest
    (pyuaf.client.requests.BrowseNextRequest)
  - uafc::BrowseNextRequestTarget 
    (pyuaf.client.requests.BrowseNextRequestTarget and pyuaf.client.requests.BrowseNextRequestTargetVector)
  - uafc::BrowseNextConfig 
    (pyuaf.client.configs.BrowseNextConfig)
  - uafc::BrowseNextSettings 
    (pyuaf.client.configs.BrowseNextSettings)
  - uafc::BrowseNextResult 
    (pyuaf.client.requests.BrowseNextResult)
  - uafc::BrowseNextResultTarget 
    (same as pyuaf.client.requests.BrowseResultTarget and pyuaf.client.requests.BrowseResultTargetVector)

- The following methods and attributes have been added to existing classes:

  - uafc::Client::browse() 
    (pyuaf.util.Client.browse()) 
  - uaf::NodeId::isNull() 
    (pyuaf.util.NodeId.isNull()) 
  - uaf::NodeIdIdentifier::isNull(), idGuid, idOpaque 
    (pyuaf.util.NodeIdIdentifier.isNull(), idGuid, idOpaque)
  - uaf::Variant::toDateTime(), toDateTimeArray(), fromDateTime(), fromDateTimeArray() 
    (DateTime Variants are converted automatically into DateTime instances in Python) 
  - uaf::Variant::toByteString(), fromByteString(), toByteStringArray(), fromByteStringArray()
    (ByteString Variants are converted automatically into bytearray instances in Python) 
 


1.0 @ 2013/05/14
----------------------------------------------------------------------------------------------------

- Public release on GitHub.

