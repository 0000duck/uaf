# -*- coding: utf-8 -*-
#
# PyUaf documentation build configuration file, created by
# sphinx-quickstart on Fri Feb  1 11:09:34 2013.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

print("====== generating generated_error_inheritance_tree.txt ======")

import pyuaf

from pyuaf.util.errors import *

if not os.path.exists("index.rst"):
    sys.exit("ABORTED: you have to run this script in the same directory as the *.rst files!")

ignoredMembers = ["this"]
for member in dir(pyuaf.util.errors.UafError):
    if member[0] != '_':
        ignoredMembers.append(member)

def makeClassTree(l, cls, indent=0):
    
    instance = globals()[cls.__name__]()
    
    l.append(("%s%s" %(' ' * indent, cls.__name__)).ljust(70, ".") + str(instance) + "\n")
    for member in dir(cls):
        if member[0] != '_' and (member not in ignoredMembers):
            #l.append("%s    +%s (%s)\n" %(' ' * indent, member, getattr(instance, member).__class__.__name__))
            s = ("%s    +%s" %(' ' * indent, member)).ljust(70, " ")
            s += "Attribute of type: %s\n" %getattr(instance, member).__class__.__name__
            l.append(s)
    for subcls in cls.__subclasses__():
        makeClassTree(l, subcls, indent + 3)
    return l

# This will create a new file or **overwrite an existing file**.
f = open("generated_error_inheritance_tree.txt", "w")
f.writelines(makeClassTree(l=[], cls=pyuaf.util.errors.UafError))
f.close()

def makeClassList():
    lines = []
    for err in dir(pyuaf.util.errors):
        if err[0] != '_':
            try:
                instance = globals()[err]()
            except:
                # not an error
                instance = None
            
            if instance is not None:
            
                lines.append( ".. autoclass:: pyuaf.util.errors.%s\n\n" %err )
                
                memberLines = []
                
                for member in dir(getattr(pyuaf.util.errors, err)):
                    if member[0] != '_' and (member not in ignoredMembers):
                        memberLines.append( "   .. autoattribute:: pyuaf.util.errors.%s.%s\n\n" %(err,member) )
                        attr = getattr(instance, member)
                        try:
                            memberLines.append( "    - type: :class:`~%s.%s`\n\n" %(attr.__module__, attr.__class__.__name__) )
                        except:
                            memberLines.append( "    - type: ``%s``\n\n" %type(attr).__name__ )
                
                if len(memberLines) > 0:
                    lines.append("- attributes:\n\n")
                    lines.extend(memberLines)
                
    return lines


# This will create a new file or **overwrite an existing file**.
f = open("generated_error_list.txt", "w")
f.writelines(makeClassList())
f.close()


print("====== generating generated_statuscodes.txt ======")
statuscodes = {}
for member in dir(pyuaf.util.statuscodes):
    if member[0] != '_':
        try:
            value = int(getattr(pyuaf.util.statuscodes, member))
            statuscodes[value] = member
        except:
            # not an int
            pass

lines = []
for k, v in sorted(statuscodes.items()):
    s = ".. class:: pyuaf.util.statuscodes.%s\n" %v
    lines.append(s)
    

# This will create a new file or **overwrite an existing file**.
f = open("generated_statuscodes.txt", "w")
f.writelines(lines)
f.close()


# continue with the normal conf.py
# ==================================================================================================


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../../lib/'))

# -- General configuration -----------------------------------------------------

# ##### show all warnings: ######
nitpicky = True

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest', 'sphinx.ext.autosummary']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# add the __init__(self, ...) constructor documentation to the classes documentation
autoclass_content="both"

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'PyUAF'
copyright = u'2013, Wim Pessemier (Institute for Astronomy, KU Leuven) - http://github.com/uaf'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.

def getVersion():
    try:
        f = open("../../../version.txt", "r")
        version = f.read()
        f.close()
        return version
    except:
        return ""

version = getVersion()
# The full version, including alpha/beta/rc tags.
release = getVersion()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = { "sidebarwidth" : 300 }

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "../../../doc/img/logo/uaf_logo_200x67_transparent.png"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'PyUafdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'PyUAF.tex', u'PyUAF Documentation',
   u'Wim Pessemier', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'pyuaf', u'PyUAF Documentation',
     [u'Wim Pessemier'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'PyUaf', u'PyUAF Documentation',
   u'Wim Pessemier', 'PyUAF', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'
